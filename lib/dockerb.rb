require 'erb'
require 'dockerb/version'

module Dockerb
  GENERATED = "# Generated by dockerb VERSION, do not modify"
  SEARCH = /#{Regexp.escape(GENERATED).sub('VERSION', '([\d\.]+)')}/

  class << self
    def compile(docker_file="Dockerfile", &block)
      return (yield if block) unless File.exist?("#{docker_file}.erb")
      ensure_not_older_than_last(docker_file)
      compile_dockerfile(docker_file, &block)
    end

    private

    def ensure_not_older_than_last(docker_file)
      return unless File.exist?(docker_file)
      return unless old = File.read(docker_file)[SEARCH, 1]
      return unless Gem::Version.new(old) > Gem::Version.new(VERSION)
      raise "Previous file was generated by dockerb #{old}, use it or a newer version."
    end

    def compile_dockerfile(docker_file, &block)
      File.write(docker_file, Context.compile(File.read("#{docker_file}.erb")))
      yield if block
    ensure
      File.unlink(docker_file) if File.exist?(docker_file) && block
    end
  end

  class Context
    class << self
      def compile(code)
        warn = "#{GENERATED.sub('VERSION', Dockerb::VERSION)}\n"
        warn + ERB.new(code).result(binding).strip + "\n" + warn
      end

      def bundle
        <<-EOF.gsub(/^          /, "")
          ADD Gemfile /app/
          ADD Gemfile.lock /app/
          ADD vendor/cache /app/vendor/cache
          RUN (bundle install --quiet --local --jobs 4 || bundle check) && #{delete_gem_junk}
        EOF
      end

      def install_gem(name, options=nil)
        options = " " << options if options
        version = File.read("Gemfile.lock")[/^    #{name} \((.+)\)/, 1] || raise("Gem #{name} not found in Gemfile.lock")
        "RUN gem install -v #{version} #{name}#{options} && #{delete_gem_junk}"
      end

      def delete_gem_junk
        "#{delete_tests} && #{delete_build_files}"
      end

      private

      def delete_tests
        %{find #{gem_home}/ -maxdepth 2 -name "test" -o -name "spec" | xargs rm -r}
      end

      # deleting all of ext makes nokogiri + Nokogumbo install fail
      def delete_build_files
        %{find #{gem_home}/*/ext/ -maxdepth 1 -mindepth 1 -type d | xargs -L1 bash -c 'if [ -e $0/Makefile ]; then make -C $0 clean; fi'}
      end

      def gem_home
        "/usr/local/lib/ruby/gems/*/gems"
      end
    end
  end
end
